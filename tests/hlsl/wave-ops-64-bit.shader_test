[require]
shader model >= 6.0
float64

[uav 0]
format r32g32 float
size (buffer, 4)

3.5 1.0
3.5 1.0
3.5 1.5
3.5 1.0

[uav 1]
format r32g32b32a32 uint
size (buffer, 16)

0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0

[compute shader]
RWBuffer<float2> u0;
RWBuffer<uint4> u1;

    [numthreads(4, 1, 1)]
void main(uint id : SV_GroupIndex)
{
    double2 d = u0[id];
    bool2 b = WaveActiveAllEqual(d);
    u1[id] = uint4(b.x, b.y, 0, 0);
}

[test]
dispatch 4 1 1
probe uav 1 (0) rgbaui (1, 0, 0, 0)
probe uav 1 (1) rgbaui (1, 0, 0, 0)
probe uav 1 (2) rgbaui (1, 0, 0, 0)
probe uav 1 (3) rgbaui (1, 0, 0, 0)


[compute shader]
RWBuffer<float2> u0;
RWBuffer<double2> u1;

    [numthreads(4, 1, 1)]
void main(uint id : SV_GroupIndex)
{
    double2 d = u0[id] + u0[id ^ 1];
    u1[id] = WaveReadLaneFirst(d);
    u1[4 + id] = WaveReadLaneAt(d, 3);
}

[test]
dispatch 4 1 1
probe uav 1 (0) rgd (7.0, 2.0)
probe uav 1 (1) rgd (7.0, 2.0)
probe uav 1 (2) rgd (7.0, 2.0)
probe uav 1 (3) rgd (7.0, 2.0)
probe uav 1 (4) rgd (7.0, 2.5)
probe uav 1 (5) rgd (7.0, 2.5)
probe uav 1 (6) rgd (7.0, 2.5)
probe uav 1 (7) rgd (7.0, 2.5)


[compute shader]
RWBuffer<float2> u0;
RWBuffer<double2> u1;

    [numthreads(4, 1, 1)]
void main(uint id : SV_GroupIndex)
{
    u1[id] = WaveActiveSum(u0[id]);
}

[test]
dispatch 4 1 1
probe uav 1 (0) rgd (14.0, 4.5)
probe uav 1 (1) rgd (14.0, 4.5)
probe uav 1 (2) rgd (14.0, 4.5)
probe uav 1 (3) rgd (14.0, 4.5)


[compute shader]
RWBuffer<float2> u0;
RWBuffer<double2> u1;

    [numthreads(4, 1, 1)]
void main(uint id : SV_GroupIndex)
{
    u1[id] = WaveActiveProduct(u0[id]);
}

[test]
dispatch 4 1 1
probe uav 1 (0) rgd (150.0625, 1.5)
probe uav 1 (1) rgd (150.0625, 1.5)
probe uav 1 (2) rgd (150.0625, 1.5)
probe uav 1 (3) rgd (150.0625, 1.5)


[compute shader]
RWBuffer<float2> u0;
RWBuffer<double2> u1;

    [numthreads(4, 1, 1)]
void main(uint id : SV_GroupIndex)
{
    u1[id] = WaveActiveMin(u0[id]);
}

[test]
dispatch 4 1 1
probe uav 1 (0) rgd (3.5, 1.0)
probe uav 1 (1) rgd (3.5, 1.0)
probe uav 1 (2) rgd (3.5, 1.0)
probe uav 1 (3) rgd (3.5, 1.0)


[compute shader]
RWBuffer<float2> u0;
RWBuffer<double2> u1;

    [numthreads(4, 1, 1)]
void main(uint id : SV_GroupIndex)
{
    u1[id] = WaveActiveMax(u0[id]);
}

[test]
dispatch 4 1 1
probe uav 1 (0) rgd (3.5, 1.5)
probe uav 1 (1) rgd (3.5, 1.5)
probe uav 1 (2) rgd (3.5, 1.5)
probe uav 1 (3) rgd (3.5, 1.5)


[compute shader]
RWBuffer<float2> u0;
RWBuffer<double2> u1;

    [numthreads(4, 1, 1)]
void main(uint id : SV_GroupIndex)
{
    u1[id] = WavePrefixSum(u0[id]);
}

[test]
dispatch 4 1 1
probe uav 1 (0) rgd (0.0, 0.0)
probe uav 1 (1) rgd (3.5, 1.0)
probe uav 1 (2) rgd (7.0, 2.0)
probe uav 1 (3) rgd (10.5, 3.5)


[compute shader]
RWBuffer<float2> u0;
RWBuffer<double2> u1;

    [numthreads(4, 1, 1)]
void main(uint id : SV_GroupIndex)
{
    u1[id] = WavePrefixProduct(u0[id]);
}

[test]
dispatch 4 1 1
probe uav 1 (0) rgd (1.0, 1.0)
probe uav 1 (1) rgd (3.5, 1.0)
probe uav 1 (2) rgd (12.25, 1.0)
probe uav 1 (3) rgd (42.875, 1.5)


[uav 0]
format r32g32b32a32 float
size (buffer, 4)

0.25 0.50 0.75 1.00
0.50 0.25 1.00 0.75
0.75 1.00 0.50 0.25
1.00 0.75 0.25 0.50

[compute shader]
RWBuffer<float2> u0;
RWBuffer<double2> u1;

    [numthreads(4, 1, 1)]
void main(uint id : SV_GroupIndex)
{
    uint i = WaveGetLaneIndex() % 4;
    double2 d = u0[i];
    u1[i] = QuadReadAcrossX(d);
}

[test]
dispatch 4 1 1
probe uav 1 (0) rgd (0.5, 0.25)
probe uav 1 (1) rgd (0.25, 0.5)
probe uav 1 (2) rgd (1.0, 0.75)
probe uav 1 (3) rgd (0.75, 1.0)


[compute shader]
RWBuffer<float2> u0;
RWBuffer<double2> u1;

    [numthreads(4, 1, 1)]
void main(uint id : SV_GroupIndex)
{
    uint i = WaveGetLaneIndex() % 4;
    double2 d = u0[i];
    u1[i] = QuadReadLaneAt(d, 2);
}

[test]
dispatch 4 1 1
probe uav 1 (0) rgd (0.75, 1.0)
probe uav 1 (1) rgd (0.75, 1.0)
probe uav 1 (2) rgd (0.75, 1.0)
probe uav 1 (3) rgd (0.75, 1.0)


[require]
shader model >= 6.0
int64

[uav 0]
format r32g32b32a32 uint
size (buffer, 4)

1  8   16 0
1 11    5 0
2 15    4 0
4  8    6 0

[uav 1]
format r32g32b32a32 uint
size (buffer, 16)

0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0

[compute shader]
RWBuffer<uint64_t2> u0;
RWBuffer<uint64_t2> u1;

    [numthreads(4, 1, 1)]
void main(uint id : SV_GroupIndex)
{
    uint64_t2 u = u0[id] + u0[id ^ 1];
    u1[id] = WaveReadLaneFirst(u);
    u1[4 + id] = WaveReadLaneAt(u, 3);
}

[test]
dispatch 4 1 1
probe uav 1 (0) rgui64 (0x1300000002, 21)
probe uav 1 (1) rgui64 (0x1300000002, 21)
probe uav 1 (2) rgui64 (0x1300000002, 21)
probe uav 1 (3) rgui64 (0x1300000002, 21)
probe uav 1 (4) rgui64 (0x1700000006, 10)
probe uav 1 (5) rgui64 (0x1700000006, 10)
probe uav 1 (6) rgui64 (0x1700000006, 10)
probe uav 1 (7) rgui64 (0x1700000006, 10)


[compute shader]
RWBuffer<uint64_t2> u0;
RWBuffer<uint64_t2> u1;

    [numthreads(4, 1, 1)]
void main(uint id : SV_GroupIndex)
{
    u1[id] = WaveActiveSum(u0[id]);
}

[test]
dispatch 4 1 1
probe uav 1 (0) rgui64 (0x2a00000008, 31)
probe uav 1 (1) rgui64 (0x2a00000008, 31)
probe uav 1 (2) rgui64 (0x2a00000008, 31)
probe uav 1 (3) rgui64 (0x2a00000008, 31)


[compute shader]
RWBuffer<uint64_t2> u0;
RWBuffer<uint64_t2> u1;

    [numthreads(4, 1, 1)]
void main(uint id : SV_GroupIndex)
{
    u1[id] = WaveActiveProduct(u0[id]);
}

[test]
dispatch 4 1 1
probe uav 1 (0) rgui64 (0xe400000008, 0x780)
probe uav 1 (1) rgui64 (0xe400000008, 0x780)
probe uav 1 (2) rgui64 (0xe400000008, 0x780)
probe uav 1 (3) rgui64 (0xe400000008, 0x780)


[compute shader]
RWBuffer<uint64_t2> u0;
RWBuffer<uint64_t2> u1;

    [numthreads(4, 1, 1)]
void main(uint id : SV_GroupIndex)
{
    u1[id] = WaveActiveMin(u0[id]);
}

[test]
dispatch 4 1 1
probe uav 1 (0) rgui64 (0x800000001, 4)
probe uav 1 (1) rgui64 (0x800000001, 4)
probe uav 1 (2) rgui64 (0x800000001, 4)
probe uav 1 (3) rgui64 (0x800000001, 4)


[compute shader]
RWBuffer<uint64_t2> u0;
RWBuffer<uint64_t2> u1;

    [numthreads(4, 1, 1)]
void main(uint id : SV_GroupIndex)
{
    u1[id] = WaveActiveMax(u0[id]);
}

[test]
dispatch 4 1 1
probe uav 1 (0) rgui64 (0xf00000002, 16)
probe uav 1 (1) rgui64 (0xf00000002, 16)
probe uav 1 (2) rgui64 (0xf00000002, 16)
probe uav 1 (3) rgui64 (0xf00000002, 16)


[compute shader]
RWBuffer<uint64_t2> u0;
RWBuffer<uint64_t2> u1;

    [numthreads(4, 1, 1)]
void main(uint id : SV_GroupIndex)
{
    u1[id] = WavePrefixSum(u0[id]);
}

[test]
dispatch 4 1 1
probe uav 1 (0) rgui64 (0, 0)
probe uav 1 (1) rgui64 ( 0x800000001, 16)
probe uav 1 (2) rgui64 (0x1300000002, 21)
probe uav 1 (3) rgui64 (0x2200000004, 25)


[compute shader]
RWBuffer<uint64_t2> u0;
RWBuffer<uint64_t2> u1;

    [numthreads(4, 1, 1)]
void main(uint id : SV_GroupIndex)
{
    u1[id] = WavePrefixProduct(u0[id]);
}

[test]
dispatch 4 1 1
probe uav 1 (0) rgui64 (1, 1)
probe uav 1 (1) rgui64 ( 0x800000001,  16)
probe uav 1 (2) rgui64 (0x1300000001,  80)
probe uav 1 (3) rgui64 (0x3500000002, 320)


[compute shader]
RWBuffer<uint64_t2> u0;
RWBuffer<uint64_t2> u1;

    [numthreads(4, 1, 1)]
void main(uint id : SV_GroupIndex)
{
    u1[id] = WaveActiveBitAnd(u0[id]);
}

[test]
dispatch 4 1 1
probe uav 1 (0) rgui64 (0x800000000, 0)
probe uav 1 (1) rgui64 (0x800000000, 0)
probe uav 1 (2) rgui64 (0x800000000, 0)
probe uav 1 (3) rgui64 (0x800000000, 0)


[compute shader]
RWBuffer<uint64_t2> u0;
RWBuffer<uint64_t2> u1;

    [numthreads(4, 1, 1)]
void main(uint id : SV_GroupIndex)
{
    u1[id] = WaveActiveBitOr(u0[id]);
}

[test]
dispatch 4 1 1
probe uav 1 (0) rgui64 (0xf00000007, 0x17)
probe uav 1 (1) rgui64 (0xf00000007, 0x17)
probe uav 1 (2) rgui64 (0xf00000007, 0x17)
probe uav 1 (3) rgui64 (0xf00000007, 0x17)


[compute shader]
RWBuffer<uint64_t2> u0;
RWBuffer<uint64_t2> u1;

    [numthreads(4, 1, 1)]
void main(uint id : SV_GroupIndex)
{
    u1[id] = WaveActiveBitXor(u0[id]);
}

[test]
dispatch 4 1 1
probe uav 1 (0) rgui64 (0x400000006, 0x17)
probe uav 1 (1) rgui64 (0x400000006, 0x17)
probe uav 1 (2) rgui64 (0x400000006, 0x17)
probe uav 1 (3) rgui64 (0x400000006, 0x17)


[uav 0]
format r32g32b32a32 uint
size (buffer, 4)

 1  2    3  4
 5  6    7  8
 9 10   11 12
13 14   15 16

[compute shader]
RWBuffer<uint64_t2> u0;
RWBuffer<uint64_t2> u1;

    [numthreads(4, 1, 1)]
void main(uint id : SV_GroupIndex)
{
    uint i = WaveGetLaneIndex() % 4;
    uint64_t2 u = u0[i];
    u1[i] = QuadReadAcrossX(u);
}

[test]
dispatch 4 1 1
probe uav 1 (0) rgui64 (0x600000005,  0x800000007)
probe uav 1 (1) rgui64 (0x200000001,  0x400000003)
probe uav 1 (2) rgui64 (0xe0000000d, 0x100000000f)
probe uav 1 (3) rgui64 (0xa00000009,  0xc0000000b)


[compute shader]
RWBuffer<uint64_t2> u0;
RWBuffer<uint64_t2> u1;

    [numthreads(4, 1, 1)]
void main(uint id : SV_GroupIndex)
{
    uint i = WaveGetLaneIndex() % 4;
    uint64_t2 u = u0[i];
    u1[i] = QuadReadAcrossY(u);
}

[test]
dispatch 4 1 1
probe uav 1 (0) rgui64 (0xa00000009,  0xc0000000b)
probe uav 1 (1) rgui64 (0xe0000000d, 0x100000000f)
probe uav 1 (2) rgui64 (0x200000001,  0x400000003)
probe uav 1 (3) rgui64 (0x600000005,  0x800000007)


[compute shader]
RWBuffer<uint64_t2> u0;
RWBuffer<uint64_t2> u1;

    [numthreads(4, 1, 1)]
void main(uint id : SV_GroupIndex)
{
    uint i = WaveGetLaneIndex() % 4;
    uint64_t2 u = u0[i];
    u1[i] = QuadReadAcrossDiagonal(u);
}

[test]
dispatch 4 1 1
probe uav 1 (0) rgui64 (0xe0000000d, 0x100000000f)
probe uav 1 (1) rgui64 (0xa00000009,  0xc0000000b)
probe uav 1 (2) rgui64 (0x600000005,  0x800000007)
probe uav 1 (3) rgui64 (0x200000001,  0x400000003)


[compute shader]
RWBuffer<uint64_t2> u0;
RWBuffer<uint64_t2> u1;

    [numthreads(4, 1, 1)]
void main(uint id : SV_GroupIndex)
{
    uint i = WaveGetLaneIndex() % 4;
    uint64_t2 u = u0[i];
    u1[i] = QuadReadLaneAt(u, 2);
}

[test]
dispatch 4 1 1
probe uav 1 (0) rgui64 (0xa00000009,  0xc0000000b)
probe uav 1 (1) rgui64 (0xa00000009,  0xc0000000b)
probe uav 1 (2) rgui64 (0xa00000009,  0xc0000000b)
probe uav 1 (3) rgui64 (0xa00000009,  0xc0000000b)


[uav 0]
format r32g32b32a32 sint
size (buffer, 4)

-3 -1 -4 2
 3  1 -4 2
 0  5 -3 2
-1 -1 -1 2

[uav 1]
format r32g32b32a32 sint
size (buffer, 16)

0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0

[compute shader]
RWBuffer<int64_t2> u0;
RWBuffer<int64_t2> u1;

    [numthreads(4, 1, 1)]
void main(uint id : SV_GroupIndex)
{
    u1[id] = WaveActiveMin(u0[id]);
}

[test]
dispatch 4 1 1
probe uav 1 (0) rgbai (-3, -1, -4, 2)
probe uav 1 (1) rgbai (-3, -1, -4, 2)
probe uav 1 (2) rgbai (-3, -1, -4, 2)
probe uav 1 (3) rgbai (-3, -1, -4, 2)


[compute shader]
RWBuffer<int64_t2> u0;
RWBuffer<int64_t2> u1;

    [numthreads(4, 1, 1)]
void main(uint id : SV_GroupIndex)
{
    u1[id] = WaveActiveMax(u0[id]);
}

[test]
dispatch 4 1 1
probe uav 1 (0) rgbai (0, 5, -1, 2)
probe uav 1 (1) rgbai (0, 5, -1, 2)
probe uav 1 (2) rgbai (0, 5, -1, 2)
probe uav 1 (3) rgbai (0, 5, -1, 2)